Recap from Week 8
(delivered on Week 9)


MVC is a design pattern.

MVC can be found everywhere:

- Spring (Java)
- Django (Python)
- JavaScript frameworks (Angular)


MVC separates the UI into:

- The Model
- The View
- The Controller



The Model

Represents data and business logic.
Core of your application.

Responsible for:

- Fetching data from a database
- Processing data
- Enforcing business rules

The Model does not know anything
about the user interface.


The View

Presents the data from
the Model to the user.

Renders the UI (what user sees)
HTML, CSS, and JavaScript.

Contains minimal logic.


The Controller

Handles user input, potentially talks
to the Model to get or save data, and then
selects the appropriate View to
send back to the user.



'Convention over Configuration'

Following certain naming and
structural conventions.

1) Convention for controllers

All Controller classes go inside
/Controllers/ and have names with
*Controller.

Example

/Controllers/HomeController.cs


2) Convention for views

All Views (*.cshtml) go inside /Views/
and follow convention:

/Views/ [ControllerName] / [ActionName].cshtml.


Example

/Views/Home/ -> /Controllers/HomeController.cs
/Views/Home/Index.cshtml -> HomeController.Index()


3) Convention for models

All Models go inside /Models/


4) wwwroot

This folder is for static files:
CSS, JS, images


Sample MVC project structure


MyApp/
├── Controllers/
│   ├── HomeController.cs
│   └── ProductsController.cs
├── Models/
│   ├── Product.cs
│   └── ViewModels/
│       └── ProductListViewModel.cs
├── Views/
│   ├── Home/
│   │   ├── Index.cshtml
│   │   ├── About.cshtml
│   │   └── Contact.cshtml
│   ├── Products/
│   │   ├── Index.cshtml
│   │   ├── Details.cshtml
│   │   └── Delete.cshtml
│   ├── Shared/
│   │   ├── _Layout.cshtml
│   │   ├── _Navbar.cshtml
│   │   └── Error.cshtml
│   └── _ViewStart.cshtml
├── wwwroot/
│   ├── css/
│   │   └── site.css
│   ├── js/
│   │   └── site.js
│   ├── lib/
│   │   ├── bootstrap/
│   │   └── jquery/
│   └── images/
│       └── logo.png
├── Data/
│   └── ApplicationDbContext.cs
├── Program.cs
├── Startup.cs
├── appsettings.json
└── MyApp.csproj


Create MVC project:

> dotnet new mvc -n MyProject

Run MVC project:

> cd MyProject
> dotnet run
open browser: https://localhost:[port]

Stop MVC project:

> control + C (Mac)
> CTRL + C (Win)


Brief history of web pages

Static Web Pages

html files on server map 1-to-1 with URL.

Example

URL: https://example.com/products/index.html
server: /products/index.html


Dynamic Web PAges

No html files. HTML is generated by script.

Example

URL: https://example.com/products/index.php
server: /products/index.php -> html


MVC Web Pages

URL is mapped to a controller, which
in turn uses Model for data and
chooses the View.

MVC serves the results of method calls,
not files on disk.

Example

URL: https://example.com/Products
MVC → ProductsController.Index() -> /Views/Products/Index.cshtml -> html



Namespace


Namespace is used to better
organize your code.

Without a namespace you need Fully
Qualified Name.

// no namespace
public class DemoController { ... }
ProjectName.Controllers.DemoController cl =
   new ProjectName.Controllers.DemoController();

With a namespace and 'using':

namespace ProjectName.Controllers;
public class DemoController { ... }

using ProjectName.Controllers;
DemoController cl = new DemoController();



Class Inheritance

When one class gets all
fields and properties
belonging to other class.


Example

public class HomeController : Controller {}


Example

public class HomeController : Controller
{
    public IActionResult MyAction()
    {
        return Content("Hello"); // ← This method comes from Controller class
    }
}



Logger

Used to log activity.

Why logging is important?

- Debugging production issues
- Monitoring application health
- Tracking errors and user activities

Example

public IActionResult Index()
{
    _logger.LogInformation("Home page visited at {Time}", DateTime.Now);
    return View();
}

Result (navigate to localhost:5235/Home/)

info: LecDemo.Controllers.HomeController[0]
      Home page visited at 10/27/2025 15:57:53


How to create new controller

> dotnet new mvccontroller -n ProductsController -o Controllers



Controller Actions

Their job is to respond to URL requests,
perform actions and return a response back.

Example

/Controllers/ProductsController.cs
    public string Index()
    {
        return "Hello from Index()";
    }

This action will be called for:

URL: /Products
URL: /Products/Index



Parameters in Controller Actions

We can pass parameters from URL to
our action methods:

1. Query string (url?param=value&param2=value2)
2. URL segments (Products/Details/8)

Query string params

Example

// action method for query string
public string Browse(string song)
{
    string songDisplay = System.Net.WebUtility.HtmlEncode(song);
    return $"Browsing song: {songDisplay}";
}

Result

URL: http://localhost:5235/Products/Browse?song=Rock
Browser: Browsing song: Rock

Important: Use HtmlEncode() to prevent XSS attacks!

Without HtmlEncode() XSS attack:

public string Browse(string song)
{
    return $"Browsing: {song}";
}

http://localhost:5235/Products/Browse?song=<script>alert('xss')</script>


URL Segments

Example

// action method for URL segment
public string Details(int id)
{
    return $"Details of {id}";
}

Result

URL: http://localhost:5235/Products/Details/5
Browser: Details of 5

XSS injection through URL segment is not
possible.


Full Controller cycle example

public class ProductsController : Controller
{
    public IActionResult Index() // Action method
    {
        Product products = _products; // Get data from Model
        return View(products); // Pass Model to View and return View
    }
}



Thank you!