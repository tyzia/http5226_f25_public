Recap from Week 4


Class definition:

- file name same as class:

Student.cs
class Student
{
    private string _name;
    public string Name;
}

Here:

_name = field, used to store the data
Name = property, used to get/set data in private field

Access modifiers:

- public (you can access it outside of class)
- private (you can access it only inside of class)

Example

class Student
{
    public string Name;
    private string YourName;
}

Student man = new Student();

man.Name = "Andrei"; // ok
man.YourName = "Andrei"; // error


Setters/Getters

Getter method would define logic how
to get a value of a private field.

Setter method would define logic how
to set a value of a private field.

Example

class Student
{
    public string Name { get; set; };
}

These getters/setters do nothing useful so far.

class Student
{
    private string _name;
    public string Name
    {
        get { return _name; }
        set
        {
            if (!string.IsNullOrEmpty(value)) // 'value' is a must-use keyword here
            {
                _name = value;
            } else
            {
                throw new ArgumentException("Name cannot be empty");
            }
        }
    }
}

Student man = new Student();

man._name = "Andrei"; // error
man.Name = ""; // exception thrown
man.Name = "Andrei"; // ok

We use setters to safeguard fields
of our objects.


Constructor

Special method which accepts parameters
and sets the values to our fields at the
moment when object is constructed/instantiated.

class Student
{
    private string _name;
    public string Name;

    // constructor
    public Student(string name)
    {
        Name = name;
    }
}

Student student1 = new Student("Andrei");




Methods

We can add methods into class to perform some tasks.

Methods also have access modifiers
similar to the above:

- public
- private

Example

public class Student
{
    public void IntroduceYourself()
    {
        Console.WriteLine("Hello, I'm a student!");
    }
    private void HideYourself()
    {
        Console.WriteLine("Hello, I'm a student!");
    }
}

Student st = new Student();
st.IntroduceYourself(); // "Hello, I'm a student!"
st.HideYourself(); // error



Signature

Method's signature is a combination of:

- method's name
- method's parameters

Signature must be unique.

Example:

public int GetAge() { return 18; }
public int GetAge(int start) { return start > 18 ? start : 0; }
public int GetAge(int start, int finish) { return start < 18 < finish ? start : 0; }

Here we have different signatures:

1) "GetAge()" // no params
2) "GetAge(int)" // one parameter of type 'int'
3) "GetAge(int, int)" // two parameters of type 'int'




Static methods

Static methods can be accessed without creating an
instance of the class (object).
They don't depend on the state of object
("standalone utility").

Example

public class Student
{
    public static string PrintName()
    {
        return "Hello world";
    }
}

Student.PrintName(); // "Hello world"


class Student
{
    public string Name;
    public string GetName()
    {
        return Name;
    }
    public static string PrintName()
    {
        return "Hello world";
    }
}

Student st1 = new Student();
st1.Name = "Andrei";
st1.GetName(); // "Andrei"
st1.PrintNAme(); // "Hello world"

Student st2 = new Student();
st2.Name = "Canada";
st2.GetName(); // "Canada"
st2.PrintNAme(); // "Hello world"