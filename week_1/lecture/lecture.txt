





Backend 2 (asp.net)








Plan



How Internet works
Client & Servers
Packets
IP Address
Routers
ISP
DNS
TCP

Backend
Frontend
ASP.NET
ASP.NET MVC













How Internet works




Internet is not like a cloud.
Internet is like a postal service.

When you send an email, watch a video,
or load a webpage, you're not just 'using the internet'
— you're sending a letter and receiving a package
through an incredibly complex, global delivery system.

Let's break down how that system works.


Key Concept 1: Clients and Servers

Every single interaction on the internet involves
two main characters:

- Client
- Server

Clients:

- Your laptop
- Your phone
- Your smart TV
- Your fridge

Client is the one requesting information.

Servers - powerful computers, usually in
a data center, that store information and
deliver it upon request.

Example

When you type www.google.com into your browser,
your laptop (the client) is asking Google's
servers for the Google homepage.


Key Concept 2: Packets

You don't send a whole, continuous stream of data.
It's inefficient and if it got lost, you'd have to
resend the whole thing.

Instead, data is broken down into tiny,
manageable pieces called Packets.
Each packet contains a piece of the data, plus crucial
information like where it came from and where it's going.



Key Concept 3: IP Addresses

How do these packets know where to go?
Every device connected to the internet has a
unique numeric label called an IP Address:

Example: 192.168.1.1.

Servers have IP addresses.
When you type google.com, a system called DNS
translates that name into Google's IP address.

To see your own IP address:

Mac: > ifconfig
Win: > ipconfig



Key Concept 4: Routers

Packets don't fly directly from your laptop
to a server in another country.
They travel through special devices called Routers.

A router is like a post office sorting facility.
Its job is to look at the destination address on
a packet (its IP address) and decide the best possible
path to send it next.

Packet travels from your laptop through:

- Your home router.
- Your Internet Service Provider router
- Other bigger routers, hopping from router to
router across the world until it reaches its destination.



Key Concept 5: Internet Service Provider (ISP)

Your gateway to this entire network is your
Internet Service Provider — a company like Bell or Rogers.

You connect to your ISP (via cable, fiber, or phone line),
and they connect you to the global network of other ISPs
and routers.



Key Concept 6: DNS (The Domain Name System)

We remember names, not numbers.
It's easier to remember google.com than
142.251.32.110.

That's where DNS comes in.

The Domain Name System (DNS) is the
internet's phonebook.

The very first thing your computer does when
you type a website address is ask a DNS server:

'Hey, what's the IP address for google.com?'

The DNS server replies with the number.
Now your computer knows where to send the request.

This all happens in milliseconds.


Key Concept 7: TCP (Transmission Control Protocol)

How do we ensure all packets arrive and are put
back in the correct order?

This is handled by a set of rules called TCP.

TCP:

- Assigns numbers the packets
E.g. #1, #2, #3, etc, so they can be reassembled in order

- Requests acknowledgements
The receiving server sends back a message
saying 'I got packet #5!'

- Handles retransmission
If packet #6 doesn't arrive, the server says
'Hey, I'm missing #6!' and TCP on the client resends it.



Example

- You type youtube.com and hit enter.

- Your computer asks the DNS for YouTube's IP address. It gets it.
192.168.1.2

- Your browser requests a cat video. This request is broken into packets.
#1, #2

- Each packet is addressed to YouTube's IP and sent to your home router.
#1 -> 192.168.1.2
#2 -> 192.168.1.2

- Each packet also has your address
#1 -> 192.168.1.2 from 192.168.1.8
#2 -> 192.168.1.2 from 192.168.1.8

- Your router sends them to your ISP's router.

- Your ISP's router passes them to routers across the internet,
hopping them along the fastest path towards YouTube's servers.

- YouTube's server receives the packets.
#2, #1
TCP on YouTube's server checks that all are present and
reassembles them -> #1, #2

- The server understands the request: 'Ah, you want the cat video!'

- The video data is broken into new packets:
#1, #2, #3

- These packets have YouTube's IP address and your IP address:
#1 -> 192.168.1.8 from 192.168.1.2
#2 -> 192.168.1.8 from 192.168.1.2
#3 -> 192.168.1.8 from 192.168.1.2

- The packets are sent back through the network,
following the same process in reverse.

- Your computer receives the packets:
#2, #3, #1

- TCP checks them, reassembles them:
#1, #2, #3

- Finally your browser displays the cat video
for you to enjoy.

All of this happens in a fraction of a second






Web Apps


web app (web application) - a set of web pages, generated
in response to user requests.

Example:

google.com
linkedin.com
github.com


Web app consists of:

- clients (computers, mobile phones, tablets, fridge)
- server (returns the pages requested by clients)

Clients and servers are connected through network.
Clients use special software to make requests - browsers.

User types URL of the website.

URL = Uniform Resource Locator
URL consists mainly of:

- protocol
- domain name
- path
- file name

Demo: 1.png

A web page can be:

- static (content doesn't change, *.html)
- dynamic (content changes)

HTML = Hypertext Markup Language - used to "code" web pages.



How a static web page works:

Demo: 2.png

Example: super.com/index.html

- browser sends a request to the server indicating the page (index.html)
This is HTTP request.

- server receives the request, finds index.html file and sends it back.
This is HTTP response.

- browser receives index.html and renders (displays) it.


How a dynamic web page works:

Demo: 3.png

Example: super.com/song/87

- browser sends a request to the server indicating the path /song/87
This is HTTP request.

- server receives the request, finds corresponding C# method for /song/87
and passes control to asp.net engine.
This is called IIS = Internet Information Services

- when asp.net engine receives the request, it makes a query to Database
with parameters "song" and "87".
This is called application server

- Database server finds data related to "song" and "87" and returns it
back to asp.net engine.

- asp.net generates HTML page for this request and sends it back.
This is HTTP response.

- browser receives html file and renders (displays) it.






Backend


In the above concepts Backend is the "server-side"
of a web application. A combination of:

- server
- application logic (ASP.NET engine)
- database

All these work together to:

- process user requests
- execute business logic
- manage data
- generate dynamic responses


Frontend / UI

The frontend is the HTML, CSS, and JavaScript
that are ultimately sent to the browser.

It's the user interface that the browser renders
and the user interacts with.

Backend prepares what to show to the user.
Frontend shows it to the user.

The backend is critically important.
It is the functional core of any modern web application.
It is what transforms a website from a static content
into a powerful tool.

Without a backend, you would have no:

Dynamic Content:

- Personalized feeds (like on LinkedIn or GitHub)
- search results (like on Google)
- or user-specific data

User Authentication & Authorization:

- Logins
- passwords
- permissions to access certain content.

The backend verifies who you are and what you're allowed to see.

Data Management

- The ability to create, read, update, and delete information

Example

- creating a new post,
- updating your profile,
- adding a song to a playlist.

All this logic and data storage happens on the backend.

Business Logic:

- The rules that define how an application operates.

Example

- the logic for processing an order,
- applying a discount coupon,

Security:

- It protects sensitive data.
- Validates user input.







ASP.NET



ASP.NET is a free, open-source, server-side web application
framework designed by Microsoft.

Framework = a set of tools.

We use it to build 'application server' logic.

It contains all the libraries for:

- Writing the C# code
- Handles requests from clients (routing)
- "Talks" to the database
- Generates the HTML for clients

Historically, ASP.NET has provided two ways
to build web applications:

- ASP.NET Web Forms (now is legacy)
- ASP.NET MVC

In this course we are going to learn ASP.NET MVC.



ASP.NET MVC


MVC separates an application into three main components:

- Model
- View
- Controller

and achieves separation of Concerns.

Model (M)
Represents the application's data and business logic (classes).

Controller (C)
It handles the incoming HTTP request, works with the Model
to get data or perform actions, and then selects the appropriate
View to render, passing it the data it needs.

View (V)
A HTML template responsible for the UI. It receives data from
the controller and renders it.


















Thank you

